<?xml version="1.0" encoding="utf-8"?>
<!--
Linux Docker Publishing Profile - Optimized for containerized deployment
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <WebPublishMethod>FileSystem</WebPublishMethod>
    <LastUsedBuildConfiguration>Release</LastUsedBuildConfiguration>
    <LastUsedPlatform>Any CPU</LastUsedPlatform>
    <SiteUrlToLaunchAfterPublish />
    <LaunchSiteAfterPublish>False</LaunchSiteAfterPublish>
    <ExcludeApp_Data>False</ExcludeApp_Data>
    <ProjectGuid>$(ProjectGuid)</ProjectGuid>
    <PublishUrl>bin\Release\net8.0\linux-x64\publish-docker</PublishUrl>
    <DeleteExistingFiles>True</DeleteExistingFiles>
    <TargetFramework>net8.0</TargetFramework>
    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>
    <SelfContained>false</SelfContained>
    <PublishSingleFile>false</PublishSingleFile>
    <PublishReadyToRun>false</PublishReadyToRun>
    <PublishTrimmed>false</PublishTrimmed>
    <EnvironmentName>Production</EnvironmentName>
    <PublishProfile>Linux-Docker</PublishProfile>
  </PropertyGroup>
  
  <!-- Docker-optimized settings -->
  <PropertyGroup>
    <PublishWithAspNetCoreTargetManifest>false</PublishWithAspNetCoreTargetManifest>
    <UseAppHost>false</UseAppHost>
    <!-- Optimize for container size -->
    <DebugSymbols>false</DebugSymbols>
    <DebugType>None</DebugType>
  </PropertyGroup>
  
  <!-- Exclude unnecessary files for Docker -->
  <ItemGroup>
    <Content Remove="appsettings.Development.json" />
    <Content Remove="**/*.pdb" />
    <Content Remove="**/*.xml" />
    <Content Remove="web.config" />
    <Content Remove="**/*.deps.json" />
  </ItemGroup>
  
  <!-- Create Docker files -->
  <Target Name="CreateDockerFiles" AfterTargets="PublishFiles">
    <PropertyGroup>
      <DockerfileContent># Use the ASP.NET Core runtime image
FROM mcr.microsoft.com/dotnet/aspnet:8.0

# Set the working directory
WORKDIR /app

# Copy the published application
COPY . .

# Set environment variables
ENV ASPNETCORE_ENVIRONMENT=Production
ENV ASPNETCORE_URLS=http://+:80

# Expose port
EXPOSE 80

# Set the entry point
ENTRYPOINT ["dotnet", "WanderlustApi.dll"]</DockerfileContent>
    </PropertyGroup>
    
    <PropertyGroup>
      <DockerComposeContent>version: '3.8'

services:
  wanderlust-api:
    build: .
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
    restart: unless-stopped
    networks:
      - wanderlust-network

networks:
  wanderlust-network:
    driver: bridge</DockerComposeContent>
    </PropertyGroup>
    
    <PropertyGroup>
      <DeploymentInfoContent>Docker Deployment Package
Runtime: linux-x64
Base Image: mcr.microsoft.com/dotnet/aspnet:8.0
Deployment created: $([System.DateTime]::Now)

To build and run with Docker:
  docker build -t wanderlust-api .
  docker run -p 5000:80 wanderlust-api

To use with Docker Compose:
  docker-compose up -d

Files created:
  - Dockerfile
  - docker-compose.yml
  - deployment-info.txt</DeploymentInfoContent>
    </PropertyGroup>
    
    <WriteLinesToFile File="$(PublishUrl)\Dockerfile" Lines="$(DockerfileContent)" Overwrite="true" />
    <WriteLinesToFile File="$(PublishUrl)\docker-compose.yml" Lines="$(DockerComposeContent)" Overwrite="true" />
    <WriteLinesToFile File="$(PublishUrl)\deployment-info.txt" Lines="$(DeploymentInfoContent)" Overwrite="true" />
    <Message Text="✅ Docker deployment package created at: $(PublishUrl)" Importance="high" />
    <Message Text="🐳 Dockerfile and docker-compose.yml generated" Importance="high" />
  </Target>
</Project>
