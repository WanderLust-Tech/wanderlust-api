name: Deploy API

on:
  push:
    branches: [ main, master ]
    paths: 
      - '**'
      - '.github/workflows/deploy-api.yml'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18'

jobs:
  check-api-changes:
    name: Check API Changes
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check for API changes
      id: changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E '\.(cs|csproj|json)$' > /dev/null || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "api=true" >> $GITHUB_OUTPUT
          echo "üîß API changes detected - will trigger deployment"
        else
          echo "api=false" >> $GITHUB_OUTPUT
          echo "‚ÑπÔ∏è No API changes detected"
        fi

  build-api:
    name: Build .NET API
    runs-on: ubuntu-latest
    needs: [check-api-changes]
    if: needs.check-api-changes.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore WanderlustApi.csproj
      
    - name: Build API
      run: dotnet build WanderlustApi.csproj --configuration Release --no-restore
      
    - name: Run tests
      run: dotnet test WanderlustApi.csproj --configuration Release --no-build --verbosity normal
      
    - name: Publish API
      run: dotnet publish WanderlustApi.csproj --configuration Release --output ./publish --no-build
      
    - name: Upload API artifacts
      uses: actions/upload-artifact@v4
      with:
        name: api-build
        path: ./publish/
        retention-days: 30

  deploy-api-staging:
    name: Deploy API to Staging
    runs-on: ubuntu-latest
    needs: [build-api, check-api-changes]
    if: github.ref == 'refs/heads/develop' && (needs.check-api-changes.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch')
    environment: api-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download API artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-build
        path: ./publish/
        
    - name: Setup Node.js for deployment script
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install deployment dependencies
      run: npm install basic-ftp dotenv cross-env
        
    - name: Create web.config for IIS
      run: |
        cat > publish/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath="dotnet" 
                          arguments=".\WanderlustApi.dll" 
                          stdoutLogEnabled="true" 
                          stdoutLogFile=".\logs\stdout" 
                          hostingModel="inprocess">
                <environmentVariables>
                  <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Staging" />
                </environmentVariables>
              </aspNetCore>
              <security>
                <requestFiltering>
                  <requestLimits maxAllowedContentLength="52428800" />
                </requestFiltering>
              </security>
            </system.webServer>
          </location>
        </configuration>
        EOF
        
    - name: Deploy API to staging via FTP
      env:
        API_FTP_HOST: ${{ secrets.API_STAGING_FTP_HOST }}
        API_FTP_USER: ${{ secrets.API_STAGING_FTP_USER }}
        API_FTP_PASSWORD: ${{ secrets.API_STAGING_FTP_PASSWORD }}
        API_FTP_PORT: ${{ secrets.API_STAGING_FTP_PORT }}
        API_FTP_SECURE: ${{ secrets.API_STAGING_FTP_SECURE }}
        API_FTP_REMOTE_PATH: ${{ secrets.API_STAGING_FTP_REMOTE_PATH }}
        API_LOCAL_BUILD_PATH: ./publish
        BUILD_CONFIGURATION: Release
        CLEAR_REMOTE: true
        GITHUB_ACTIONS: true
      run: node scripts/deploy.js

  deploy-api-production:
    name: Deploy API to Production
    runs-on: ubuntu-latest
    needs: [build-api, check-api-changes]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && (needs.check-api-changes.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch')
    environment: api-production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download API artifacts
      uses: actions/download-artifact@v4
      with:
        name: api-build
        path: ./publish/
        
    - name: Setup Node.js for deployment script
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install deployment dependencies
      run: npm install basic-ftp dotenv cross-env
        
    - name: Create production web.config for IIS
      run: |
        cat > publish/web.config << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <location path="." inheritInChildApplications="false">
            <system.webServer>
              <handlers>
                <add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModuleV2" resourceType="Unspecified" />
              </handlers>
              <aspNetCore processPath="dotnet" 
                          arguments=".\WanderlustApi.dll" 
                          stdoutLogEnabled="false" 
                          stdoutLogFile=".\logs\stdout" 
                          hostingModel="inprocess">
                <environmentVariables>
                  <environmentVariable name="ASPNETCORE_ENVIRONMENT" value="Production" />
                </environmentVariables>
              </aspNetCore>
              <security>
                <requestFiltering>
                  <requestLimits maxAllowedContentLength="52428800" />
                </requestFiltering>
              </security>
              <httpErrors errorMode="Custom" />
            </system.webServer>
          </location>
        </configuration>
        EOF
        
    - name: Deploy API to production via FTP
      env:
        FTP_HOST: ${{ secrets.PROD_FTP_HOST }}
        FTP_USER: ${{ secrets.PROD_FTP_USER }}
        FTP_PASSWORD: ${{ secrets.PROD_FTP_PASSWORD }}
        FTP_PORT: ${{ secrets.PROD_FTP_PORT }}
        FTP_SECURE: ${{ secrets.PROD_FTP_SECURE }}
        API_FTP_REMOTE_PATH: ${{ secrets.API_PROD_FTP_REMOTE_PATH }}
        API_LOCAL_BUILD_PATH: ./publish
        BUILD_CONFIGURATION: Release
        CLEAR_REMOTE: true
        GITHUB_ACTIONS: true
      run: node scripts/deploy.js deploy
        
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: production-deployment-${{ github.sha }}
        path: ./publish/
        retention-days: 90

  # Health check after production deployment
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-api-production]
    if: success()
    
    steps:
    - name: Wait for deployment to settle
      run: sleep 30
      
    - name: Health check API endpoint
      run: |
        API_URL="https://${{ secrets.API_PROD_FTP_HOST }}${{ secrets.API_PROD_FTP_REMOTE_PATH }}"
        echo "üîç Checking API health at: $API_URL"
        
        # Try to reach the API health endpoint
        if curl -f -s -o /dev/null "$API_URL/health" || curl -f -s -o /dev/null "$API_URL"; then
          echo "‚úÖ API is responding"
        else
          echo "‚ö†Ô∏è API health check failed - this may be normal if the API takes time to start"
          exit 0  # Don't fail the workflow for health check issues
        fi
