-- Enhanced Models Synchronization Migration
-- Date: 2025-08-28
-- Description: Adds missing columns and tables to sync frontend/backend models

-- First, let's add missing columns to existing Users table
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Users' AND COLUMN_NAME = 'Reputation')
BEGIN
    ALTER TABLE Users ADD Reputation INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Users' AND COLUMN_NAME = 'IsActive')
BEGIN
    ALTER TABLE Users ADD IsActive BIT DEFAULT 1;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Users' AND COLUMN_NAME = 'RefreshToken')
BEGIN
    ALTER TABLE Users ADD RefreshToken NVARCHAR(500) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Users' AND COLUMN_NAME = 'RefreshTokenExpiryTime')
BEGIN
    ALTER TABLE Users ADD RefreshTokenExpiryTime DATETIME2 NULL;
END

-- Add missing columns to Articles table
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'Author')
BEGIN
    ALTER TABLE Articles ADD Author NVARCHAR(100) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'AuthorId')
BEGIN
    ALTER TABLE Articles ADD AuthorId INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'ViewCount')
BEGIN
    ALTER TABLE Articles ADD ViewCount INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'LikeCount')
BEGIN
    ALTER TABLE Articles ADD LikeCount INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'BookmarkCount')
BEGIN
    ALTER TABLE Articles ADD BookmarkCount INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'MetaDescription')
BEGIN
    ALTER TABLE Articles ADD MetaDescription NVARCHAR(500) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'MetaKeywords')
BEGIN
    ALTER TABLE Articles ADD MetaKeywords NVARCHAR(500) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'FeaturedImage')
BEGIN
    ALTER TABLE Articles ADD FeaturedImage NVARCHAR(500) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'Version')
BEGIN
    ALTER TABLE Articles ADD Version NVARCHAR(20) DEFAULT '1.0.0';
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Articles' AND COLUMN_NAME = 'VersionNumber')
BEGIN
    ALTER TABLE Articles ADD VersionNumber INT DEFAULT 1;
END

-- Add missing columns to CommunityPosts table
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'UpdatedAt')
BEGIN
    ALTER TABLE CommunityPosts ADD UpdatedAt DATETIME2 DEFAULT GETUTCDATE();
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'AuthorId')
BEGIN
    ALTER TABLE CommunityPosts ADD AuthorId INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'Category')
BEGIN
    ALTER TABLE CommunityPosts ADD Category NVARCHAR(100) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'Tags')
BEGIN
    ALTER TABLE CommunityPosts ADD Tags NVARCHAR(MAX) NULL; -- JSON array
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'IsPinned')
BEGIN
    ALTER TABLE CommunityPosts ADD IsPinned BIT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'IsClosed')
BEGIN
    ALTER TABLE CommunityPosts ADD IsClosed BIT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'IsLocked')
BEGIN
    ALTER TABLE CommunityPosts ADD IsLocked BIT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'ViewCount')
BEGIN
    ALTER TABLE CommunityPosts ADD ViewCount INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'ReplyCount')
BEGIN
    ALTER TABLE CommunityPosts ADD ReplyCount INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'LikeCount')
BEGIN
    ALTER TABLE CommunityPosts ADD LikeCount INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'ShareCount')
BEGIN
    ALTER TABLE CommunityPosts ADD ShareCount INT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'LastActivity')
BEGIN
    ALTER TABLE CommunityPosts ADD LastActivity DATETIME2 DEFAULT GETUTCDATE();
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'LastReplyById')
BEGIN
    ALTER TABLE CommunityPosts ADD LastReplyById INT NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'LastReplyByName')
BEGIN
    ALTER TABLE CommunityPosts ADD LastReplyByName NVARCHAR(100) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'RelatedArticles')
BEGIN
    ALTER TABLE CommunityPosts ADD RelatedArticles NVARCHAR(MAX) NULL; -- JSON array
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'Attachments')
BEGIN
    ALTER TABLE CommunityPosts ADD Attachments NVARCHAR(MAX) NULL; -- JSON array
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'Subscribers')
BEGIN
    ALTER TABLE CommunityPosts ADD Subscribers NVARCHAR(MAX) NULL; -- JSON array
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'IsApproved')
BEGIN
    ALTER TABLE CommunityPosts ADD IsApproved BIT DEFAULT 1;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'IsFlagged')
BEGIN
    ALTER TABLE CommunityPosts ADD IsFlagged BIT DEFAULT 0;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'ModerationReason')
BEGIN
    ALTER TABLE CommunityPosts ADD ModerationReason NVARCHAR(500) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'ModeratedBy')
BEGIN
    ALTER TABLE CommunityPosts ADD ModeratedBy NVARCHAR(100) NULL;
END

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CommunityPosts' AND COLUMN_NAME = 'ModeratedAt')
BEGIN
    ALTER TABLE CommunityPosts ADD ModeratedAt DATETIME2 NULL;
END

-- Create indexes for performance
CREATE NONCLUSTERED INDEX IX_Users_Reputation ON Users(Reputation) WHERE Reputation > 0;
CREATE NONCLUSTERED INDEX IX_Users_IsActive ON Users(IsActive);
CREATE NONCLUSTERED INDEX IX_Articles_AuthorId ON Articles(AuthorId) WHERE AuthorId > 0;
CREATE NONCLUSTERED INDEX IX_Articles_ViewCount ON Articles(ViewCount) WHERE ViewCount > 0;
CREATE NONCLUSTERED INDEX IX_CommunityPosts_AuthorId ON CommunityPosts(AuthorId) WHERE AuthorId > 0;
CREATE NONCLUSTERED INDEX IX_CommunityPosts_Category ON CommunityPosts(Category) WHERE Category IS NOT NULL;
CREATE NONCLUSTERED INDEX IX_CommunityPosts_IsPinned ON CommunityPosts(IsPinned) WHERE IsPinned = 1;
CREATE NONCLUSTERED INDEX IX_CommunityPosts_LastActivity ON CommunityPosts(LastActivity);

PRINT 'Migration completed: Enhanced models synchronization';
